= Aufgabe 1
===================


Persona
|===
|Name |Hintergrund |Ziel

|Sam alnomiry
|Sam studiert als Austauschstudent Informatik an der HHU.
 Seine Sprachkenntnisse sind mittelmäßig. Er besucht die Veranstaltungen RDB
 und Rechnerarchitektur.
 Sam hat gar keine Programmierkenntnisse und kann mit dem PC auch nicht so besonders umgehen.
 Sam liest gerne Philosophie Bücher. Deswegen ist seine Abstraktionsfähigkeit besonders stark.
 Er ist mit den Plattformen der Uni unzufrieden, da er mit den vielen Plattformen überfordert ist und wünscht sich,
 dass das ganze irgendwann viel einfacher wird und mit Fremdsprachen unterstützt wird.
 Es gibt für jeweils seine Module unterschiedliche Bestehensgrenzen und er kann sie nicht alle merken.
|Sam möchte, dass das Abgabesystem nicht nur seine erreichten Punkte bei den Abgaben sieht, sondern auch, dass es einen
 Status gibt, wie seine Leistung mit einfachen Wörtern war, z.B, gut, ausreichend, nicht bestanden, etc.

|David Zimmermann
|David ist Organisator für die Veranstaltung Programmierung an der HHU.
 Er hat große Erfahrung in der Software Entwicklung und arbeitet in der Branche seit vielen Jahren.

 Er ist verheiratet und hat auch ein Kind. Durch die vielen Verantwortungen, die er trägt, leidet er immer unter
 Zeitmangel.

 David verteilt jede Woche die Abgaben der Studierende an den Korrektoren entsprechend ihrer Arbeitszeiten und ihrer
 Beschäftigungsarten. Diese Verteilung verlangt von ihm viel Zeit und Aufwand.

 David will an der Entwicklung des neuen Abgabesystems der HHU teilnehmen und das Projekt mit seiner Erfahrung
 unterstützen.
|David will, dass das Abgabesystem die Möglichkeit hat, die Abgaben der Studierenden automatisch an den KorrektorInnen
 entsprechend ihrer Beschäftigungsarten bzw. ihrer Arbeitszeiten verteilen kann, sodass er nur die Beschäftigungsarten
 der KorrektorInnen eingeben soll und durch eine einfache Berechnung werden die Abgaben fair verteilt.
|===

= Aufgabe 2
===================
 " Hinweis: Nur aus Gründen der Lesbarkeit wurde im Text die männliche Form gewählt. "

|===
|Komponente |Aufgabe(Funktionalitäten)  |Schnittstellen mit(darf auf die folgende Komponente zugreifen) | Entscheidungen der Komponente |Welche Entscheidungen werden möglicheweise gändert oder hinzugefügt

|Student
| - Abgabefrist sehen

  - Aufgaben herunterladen

  - Lösung hochladen

  - Lösung löschen

  - Lösung ersetzen

  - Ergebnis sehen

  - Korrektur sehen

|
 - Abgabe


|der Student darf nur seine Abgabe ändern(löschen, hochladen, ersetzen) innerhalb der Abgabefrist.
|- Abgabe nach Ende der Abgabefrist außnahmeweise nach Zulassung der Organisatoren innerhalb einer
   neuen Frist hochladen.

|Korrektor
|
 - Abgaben herunterladen

 - Kommentare zu den einzelnen Abgaben schreiben(Korrektur) nur nach der Abgabefrist

 - Korrektur ändern

 - Ergebniss schreiben bzw. ändern.

|


 - Abgabe

|
 - Korrektur ändern.
|
 - Der korrektor könnte vielleicht neue Korrektur starten für eine verspätete Abgebe.

|Organisator
|- Aufgaben hochladen

 - Abgabefrist festlegen

 - Abgabefrist ändern

 - Abgabe-Kriterien festlegen ( Abgabe soll Text, Pdf, etc. )

 - Nachzügler aussuchen (neue Abgabe durch neue Abgabefrist für Nachzügler ermöglichen)

| - Aufgabe

| - Vorrausetzungen der Abgaben bestimmen

  - Neue Abgabe für ausgewählten Studierende ermöglichen

| - Anzahl der Abgabe-Versuche bestimmen.

  - Joker-Funktion einschalten.

  - Bestehensgrenze bestimmen.


|Abgabe
| - Wie Abgaben in die Datenbank gespeichert werden sollen

  - kann auf die Abgabefrist der zugehörigen Aufgabe zugreifen

  - kann auf Abgabe-Kriterien zugreifen.

  - Hat Ergebniss

  - Hat Korrektur


| - Aufgabe
| - Wie Abgaben in die Datenbank gespeichert werden sollen
  - Wer darf auf die Abgaben zugreifen.

| - Zugriffsberechtigungen
  - Speicherung in die Datenbank


|Aufgabe
| - Hat Abgabefrist

  - Hat die Aufgabe-Datei

  - Hat Abgabe-Kriterien (Beispiel: PDF, Text, Asciidoc, etc.)

| - darf auf Keine andere Komponente zugreifen

| - Keine Entscheidungen werden hier benötigt.
| - wahrscheinlich nichts, da keine Entscheidungen hier getroffen werden.



|===

" Hinweis: Die Beispiele hier dienen hier nur zu Verständlichkeit der Beschreibung der Komponenten. Das heiß, dass
  die Implementierung ganz anderes sein kann"

- Wie der Workflow mit meinen Komponenten funktioniert ?

 * Der Organisator erzeugt eine neue Aufgabe(Blatt) und liegt ihre Abgabefrist und ihre Kriterien fest.

  (Beispiel:
   Aufgabe Blatt-1 = new Aufgabe();

   Blatt-1.setFrist("16.05.2019"); )

 * In der Klasse Abgabe wird die Abgabefrist überprüft und nur falls sie gültig ist, Kann
  der Student neue Abgabe erzeugn und in die Datenbank schreiben und seine Dateien hochladen.

 * Die Korrektoren können auf die Abgaben ihrer zugewiesenen Studierende zugreifen und
  dazu Kommentare schreiben und das Ergebniss jeder Abgabe bestimmen.

  ( Beispiel:
     Durch die Methoden:

     Abgabe = getAbgabe("alalh100@hhu.de");

     Abgabe.setErgebniss(50) ;

     Abgabe.setKorrektur(" irgendwas ") ;   )


===================

= Aufgabe 3
===================

.Name der Software
*********************************

HHU-Lern-Manager ( HLM )

oder

Online-Studying-Manager ( OSM )

===================


= Aufgabe 4
===================


Teilsysteme
|===
|Name |Beschreibung
|Beschwerdesystem
|Das Beschwerdesystem gibt den Studierenden die Möglichkeit, sich über die verschiedenen Bestandteile der
 Lernveranstaltungen zu beschweren.
 Z. B., über Korrektur, Fehler in der Aufgaben, unklare Aufgabestellungen, Klausuren, etc.

 Dieses System soll dann automatisch die Beschwerden je nach Art der Beschwerde an dem zuständigen Personal
 ermitteln können, ohne dass der Student, sich darum kümmert, wer für welchen Teil der Veranstaltung verantwortlich ist
 und an welche E-Mail-Adresse die Beschwerde geschickt werden soll.

 Der/Die Student/in sucht sich die Art der Beschwerden aus und gemäß dieser Wahl wird dann die Beschwerde
 an der richtigen Person vermittelt.

 Die Studierende sollen auch den Status ihrer Beschwerden verfolgen können,
 z.B., in Bearbeitung, genehmigt, abgelehnt, siehe Antwort, etc.

 Die Verantwortlichen können dann auf die Beschwerden antworten.

 Der ganze Prozess muss zeitlich dokumentiert werden.

|Live-Fragen-System
|Viele Studierende haben Angst davor, Fragen während der Vorlesung zu stellen.
 Andere schämen sich wegen ihrer Sprachkenntnisse oder wollen einfach nicht öffentlich Fragen.

 Meine Vorstellung für das System ist, dass der Professor direkt vor der Vorlesung eine Setzung starten kann und
 die Studierende können dann an dieser Sitzung teilnehmen und anonym live Fragen stellen, die der Professor während
 der Vorlesung beobachten kann.

 Die Teilnahme an der Sitzung erfolgt durch automatisch generierte Nummer oder Barcodes.

 Der Professor kann dann auf die Fragen live eingehen oder falls gewünscht, ein paar Abschnitte aus der Vorlesung
 nochmal erklären.

 Solches System erhöht die Anzahl der Teilnahme an der Vorlesungen , da die Vorlesung interaktiver wird und
 deswegen interessanter.

 Der Professor muss auch nicht immer den richtigen Zeitpunkt zum Fragen sagen.

 Die Studierende können einfach ihre Fragen stellen und der Professor antwortet dann die Fragen an der richtigen Stelle
 und dem richtigen Zeitpunkt.
 |===

